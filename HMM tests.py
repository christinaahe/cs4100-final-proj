import unittest
import pandas as pd
import numpy as np
from HMM import HiddenMarkovModel
states = np.array([0, 1, 2, 3])
obs = np.array([0, 1, 2])
transitions = np.array([[0, .5, .5, 0], [0, .8, .1, .1], [0, .1, .8, .1], [0, 0, 0, 1]])
emissions = np.array([[0, 0, 0], [.7, .2, .1], [.1, .2, .7], [0, 0, 0]])
start = np.array([0, .5, .5, 0])
end = np.array([0, .1, .1, 1])
hmm_g = HiddenMarkovModel(states, obs, transitions, emissions, start, end)

obs_file_g = "observations.csv"
class TestHMM(unittest.TestCase):
    def setUp(self):
        # it's complicated to pass args to a testcase, so just use globals
        self.hmm = hmm_g
        self.obs = pd.read_csv(obs_file_g, header=None).values.reshape(-1)

    def test_forward(self):
        probs, forward_val = self.hmm.forward(self.obs)
        self.assertAlmostEqual(forward_val,           9.1276e-19, 21)
        self.assertAlmostEqual(probs[1][0],  0.1,        4)
        self.assertAlmostEqual(probs[1][2],  0.00135,    5)
        self.assertAlmostEqual(probs[1][5],  8.71549e-5, 9)
        self.assertAlmostEqual(probs[1][12], 5.70827e-9, 9)
        self.assertAlmostEqual(probs[1][19], 1.3157e-10, 14)
        self.assertAlmostEqual(probs[1][26], 3.1912e-14, 13)
        self.assertAlmostEqual(probs[1][32], 2.0498e-18, 22)
        self.assertAlmostEqual(probs[2][0],  0.1,        4)
        self.assertAlmostEqual(probs[2][2],  0.03591,    5)
        self.assertAlmostEqual(probs[2][5],  5.30337e-4, 8)
        self.assertAlmostEqual(probs[2][12], 1.37864e-7, 11)
        self.assertAlmostEqual(probs[2][19], 2.7819e-12, 15)
        self.assertAlmostEqual(probs[2][26], 4.6599e-15, 18)
        self.assertAlmostEqual(probs[2][32], 7.0777e-18, 22)

    def test_backward(self):
        probs, backward_val = self.hmm.backward(self.obs)
        self.assertAlmostEqual(backward_val,           9.1276e-19, 21)
        self.assertAlmostEqual(probs[1][0],  1.1780e-18, 22)
        self.assertAlmostEqual(probs[1][2],  7.2496e-18, 22)
        self.assertAlmostEqual(probs[1][5],  3.3422e-16, 20)
        self.assertAlmostEqual(probs[1][12], 3.5380e-11, 15)
        self.assertAlmostEqual(probs[1][19], 6.77837e-9, 14)
        self.assertAlmostEqual(probs[1][26], 1.44877e-5, 10)
        self.assertAlmostEqual(probs[1][32], 0.1,        4)
        self.assertAlmostEqual(probs[2][0],  7.9496e-18, 22)
        self.assertAlmostEqual(probs[2][2],  2.5145e-17, 21)
        self.assertAlmostEqual(probs[2][5],  1.6662e-15, 19)
        self.assertAlmostEqual(probs[2][12], 5.1558e-12, 16)
        self.assertAlmostEqual(probs[2][19], 7.52345e-9, 14)
        self.assertAlmostEqual(probs[2][26], 9.66609e-5, 9)
        self.assertAlmostEqual(probs[2][32], 0.1,        4)
    
    def test_viterbi(self):
        path = self.hmm.predict_algorithm(self.obs)
        self.assertEqual(path, [2]*13 + [1]*14 + [2]*6 + [3])
        # self.assertAlmostEqual(trellis[1][1][0],  0.1,      4)
        # self.assertAlmostEqual(trellis[1][6][0],  5.62e-05, 7)
        # self.assertAlmostEqual(trellis[1][7][0],  4.50e-06, 8)
        # self.assertAlmostEqual(trellis[1][16][0], 1.99e-09, 11)
        # self.assertAlmostEqual(trellis[1][17][0], 3.18e-10, 12)
        # self.assertAlmostEqual(trellis[1][23][0], 4.00e-13, 15)
        # self.assertAlmostEqual(trellis[1][25][0], 1.26e-13, 15)
        # self.assertAlmostEqual(trellis[1][29][0], 7.20e-17, 19)
        # self.assertAlmostEqual(trellis[1][30][0], 1.15e-17, 19)
        # self.assertAlmostEqual(trellis[1][32][0], 7.90e-19, 21)
        # self.assertAlmostEqual(trellis[1][33][0], 1.26e-19, 21)
        # self.assertAlmostEqual(trellis[2][ 1][0], 0.1,      4)
        # self.assertAlmostEqual(trellis[2][ 4][0], 0.00502,  5)
        # self.assertAlmostEqual(trellis[2][ 6][0], 0.00045,  5)
        # self.assertAlmostEqual(trellis[2][12][0], 1.62e-07, 9)
        # self.assertAlmostEqual(trellis[2][18][0], 3.18e-12, 14)
        # self.assertAlmostEqual(trellis[2][19][0], 1.78e-12, 14)
        # self.assertAlmostEqual(trellis[2][23][0], 5.00e-14, 16)
        # self.assertAlmostEqual(trellis[2][28][0], 7.87e-16, 18)
        # self.assertAlmostEqual(trellis[2][29][0], 4.41e-16, 18)
        # self.assertAlmostEqual(trellis[2][30][0], 7.06e-17, 19)
        # self.assertAlmostEqual(trellis[2][33][0], 1.01e-18, 20)
    
    def test_learning_probs(self):
        xi, gamma = self.hmm.train(self.obs, iterations=1, end=True)

        self.assertAlmostEqual(gamma[1][0],  0.129, 3)
        self.assertAlmostEqual(gamma[1][2],  0.011, 3)
        self.assertAlmostEqual(gamma[1][6],  0.022, 3)
        self.assertAlmostEqual(gamma[1][13], 0.887, 3)
        self.assertAlmostEqual(gamma[1][17], 0.994, 3)
        self.assertAlmostEqual(gamma[1][22], 0.961, 3)
        self.assertAlmostEqual(gamma[1][26], 0.507, 3)
        self.assertAlmostEqual(gamma[1][32], 0.225, 3)
        self.assertAlmostEqual(gamma[2][0],  0.871, 3)
        self.assertAlmostEqual(gamma[2][2],  0.989, 3)
        self.assertAlmostEqual(gamma[2][6],  0.978, 3)
        self.assertAlmostEqual(gamma[2][13], 0.113, 3)
        self.assertAlmostEqual(gamma[2][17], 0.006, 3)
        self.assertAlmostEqual(gamma[2][22], 0.039, 3)
        self.assertAlmostEqual(gamma[2][26], 0.493, 3)
        self.assertAlmostEqual(gamma[2][32], 0.775, 3)

        self.assertAlmostEqual(xi[1][0][1],  0.021, 3)
        self.assertAlmostEqual(xi[1][11][1], 0.128, 3)
        self.assertAlmostEqual(xi[1][31][1], 0.13,  3)
        self.assertAlmostEqual(xi[2][0][1],  0.003, 3)
        self.assertAlmostEqual(xi[2][21][1], 0.017, 3)
        self.assertAlmostEqual(xi[2][31][1], 0.095, 3)
        self.assertAlmostEqual(xi[1][3][2],  0.02,  3)
        self.assertAlmostEqual(xi[1][15][2], 0.018, 3)
        self.assertAlmostEqual(xi[1][28][2], 0.010, 3)
        self.assertAlmostEqual(xi[2][1][2],  0.972, 3)
        self.assertAlmostEqual(xi[2][11][2], 0.762, 3)
        self.assertAlmostEqual(xi[2][27][2], 0.907, 3)

    def test_learning_results(self):
        tr = self.hmm.T
        self.assertAlmostEqual(tr[0, 0], 0, 5)
        self.assertAlmostEqual(tr[0, 1], 0.1291, 4)
        self.assertAlmostEqual(tr[0, 2], 0.8709, 4)
        self.assertAlmostEqual(tr[0, 3], 0, 4)
        self.assertAlmostEqual(tr[1, 0], 0, 5)
        self.assertAlmostEqual(tr[1, 1], 0.8757, 4)
        self.assertAlmostEqual(tr[1, 2], 0.1090, 4)
        self.assertAlmostEqual(tr[1, 3], 0.0153, 4)
        self.assertAlmostEqual(tr[2, 0], 0, 5)
        self.assertAlmostEqual(tr[2, 1], 0.0925, 4)
        self.assertAlmostEqual(tr[2, 2], 0.8652, 4)
        self.assertAlmostEqual(tr[2, 3], 0.0423, 4)
        self.assertAlmostEqual(tr[3, 0], 0, 5)
        self.assertAlmostEqual(tr[3, 1], 0, 4)
        self.assertAlmostEqual(tr[3, 2], 0, 4)
        self.assertAlmostEqual(tr[3, 3], 1, 4)

        em = self.hmm.E
        self.assertAlmostEqual(em[0, 0], 0, 4)
        self.assertAlmostEqual(em[0, 1], 0, 4)
        self.assertAlmostEqual(em[0, 2], 0, 4)
        self.assertAlmostEqual(em[1, 0], 0.6765, 4)
        self.assertAlmostEqual(em[1, 1], 0.2188, 4)
        self.assertAlmostEqual(em[1, 2], 0.1047, 4)
        self.assertAlmostEqual(em[2, 0], 0.0584, 4)
        self.assertAlmostEqual(em[2, 1], 0.4251, 4)
        self.assertAlmostEqual(em[2, 2], 0.5165, 4)
        self.assertAlmostEqual(em[3, 0], 0, 4)
        self.assertAlmostEqual(em[3, 1], 0, 4)
        self.assertAlmostEqual(em[3, 2], 0, 4)

        self.hmm.train(self.obs, iterations=9, end=True)

        tr = self.hmm.T
        self.assertAlmostEqual(tr[0, 0], 0,      4)
        self.assertAlmostEqual(tr[0, 1], 0,      4)
        self.assertAlmostEqual(tr[0, 2], 1,      4)
        self.assertAlmostEqual(tr[0, 3], 0,      4)
        self.assertAlmostEqual(tr[1, 0], 0,      4)
        self.assertAlmostEqual(tr[1, 1], 0.9337, 4)
        self.assertAlmostEqual(tr[1, 2], 0.0663, 4)
        self.assertAlmostEqual(tr[1, 3], 0,      4)
        self.assertAlmostEqual(tr[2, 0], 0,      4)
        self.assertAlmostEqual(tr[2, 1], 0.0718, 4)
        self.assertAlmostEqual(tr[2, 2], 0.8650, 4)
        self.assertAlmostEqual(tr[2, 3], 0.0632, 4)
        self.assertAlmostEqual(tr[3, 0], 0,      4)
        self.assertAlmostEqual(tr[3, 1], 0,      4)
        self.assertAlmostEqual(tr[3, 2], 0,      4)
        self.assertAlmostEqual(tr[3, 3], 1,      4)

        em = self.hmm.E
        self.assertAlmostEqual(em[0, 0], 0,      4)
        self.assertAlmostEqual(em[0, 1], 0,      4)
        self.assertAlmostEqual(em[0, 2], 0,      4)
        self.assertAlmostEqual(em[1, 0], 0.6407, 4)
        self.assertAlmostEqual(em[1, 1], 0.1481, 4)
        self.assertAlmostEqual(em[1, 2], 0.2112, 4)
        self.assertAlmostEqual(em[2, 0], 0.00016,5)
        self.assertAlmostEqual(em[2, 1], 0.5341, 4)
        self.assertAlmostEqual(em[2, 2], 0.4657, 4)
        self.assertAlmostEqual(em[3, 0], 0,      4)
        self.assertAlmostEqual(em[3, 1], 0,      4)
        self.assertAlmostEqual(em[3, 2], 0,      4)


if __name__ == '__main__':
    unittest.main()
